
<!DOCTYPE html>
<html>

<style>

        h1 span {
            font-size: 0.6em;
        }
        .types {
          display: inline-block;
          padding: 10px 30px;
          border: 1px dotted;
          margin-right: 20px;
          overflow: hidden;
        }
        .container {
          height: 550px;
          width: 350px;
        }
        .container > div {
          float: left;
        }
        .control {
            margin-right: 70px;
        }

		#Progress_Status {
			width: 50%;
			background-color: #ddd;
		}

		#myprogressBar {
			width: 2%;
			height: 20px;
			background-color: #4CAF50;
		}

		.compass {
  position: relative;
  width: 120px;
  height: 120px;
  border-radius: 50%;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
  margin: auto;
}

.compass > .arrow {
  position: absolute;
  width: 0;
  height: 0;
  top: -20px;
  left: 50%;
  transform: translateX(-50%);
  border-style: solid;
  border-width: 10px 5px 0 5px;
  border-color: red transparent transparent transparent;
  z-index: 1;
}

.compass > .compass-circle,
.compass > .my-point {
  position: absolute;
  width: 80%;
  height: 80%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: transform 0.1s ease-out;
  background: url(https://cdn.onlinewebfonts.com/svg/img_467023.png) center
    no-repeat;
  background-size: contain;
}

.compass > .my-point {
  opacity: 0;
  width: 20%;
  height: 20%;
  background: rgb(8, 223, 69);
  border-radius: 50%;
  transition: opacity 0.5s ease-out;
}

</style>


<head>
    <title>RoundSlider - A sample demo</title>
    <script src="jquery-1.11.3.min.js"></script>
    <link href="roundslider.min.css" rel="stylesheet" />
    <script src="roundslider.min.js"></script>
</head>


<body style="padding: 10px 0 0 20px; font-family: monospace;">


    <div class="types">
        <h3>Steering wheel</h3>

        <div class="container">
            <div class="control">
			<div id="rd_slider_1"></div>


	<h3>Drive</h3>

		<br/>
			<button onclick="FRW5()">Forw 5cm</button>
		<br/>
			<button onclick="FRW1()">Forw 1cm</button>
		<br/>
		<br/>
			<button onclick="RET1()">Ret 1cm</button>
		<br/>
			<button onclick="RET5()">Ret 5cm</button>
		<br/>

		<p>

    <span class="sensor-labels">Distance</span>
    <span id="Box_lidar_dist">%Dist%</span>

    <sup class="units">cm</sup>

	<br>


	<h3>Progress:</h3>
	<div id="Progress_Status">
		<div id="myprogressBar"></div>
	  </div>
	<br>


	<h3>Compass:</h3>

	<div class="compass">
    <canvas id="compassCanvas" width="200" height="200"></canvas>
	  </div>




<script type="text/javascript">

//////////////////////////////////////////////////////////// JS start /////////////////////

let totalDistance = 100;
const compassCircle = document.querySelector(".compass-circle");
const myPoint = document.querySelector(".my-point");
let compass;

let pointDegree;

//progess bar
function updateProgressBar(distanceLeft) {
  var progressPercentage = ((totalDistance - distanceLeft) / totalDistance) * 100;
  document.getElementById("myprogressBar").style.width = progressPercentage + "%";
}


var canvas = document.getElementById('compassCanvas');
    var ctx = canvas.getContext('2d');
    var compassImage = new Image();

    compassImage.onload = function() {
        drawCompass(0); // Initial draw
    };
    compassImage.src = 'https://cdn.onlinewebfonts.com/svg/img_467023.png'; // Compass image URL

    function drawCompass(angle) {
        var size = Math.min(canvas.width, canvas.height);
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
        ctx.save();
        ctx.translate(canvas.width / 2, canvas.height / 2); // Move to the center
        ctx.rotate(angle * Math.PI / 180); // Convert degrees to radians and rotate
        ctx.drawImage(compassImage, -size / 2, -size / 2, size, size); // Draw the image centered
        ctx.restore();
    }


function simulateSensorUpdates() {
  // Simulating sensor value updates - replace this with actual data fetching
  var distanceLeft = Math.floor(Math.random() * totalDistance);
  var angle = Math.floor(Math.random() * 360);

  updateProgressBar(distanceLeft);
  drawCompass(angle);
}

setInterval(simulateSensorUpdates, 2000);


//TODO - read data from car sensors

	var From_Mega=0;									// string variable from server/mega

	var dire=0;										// direction
	var dist=0;										// distance
	var mode=0;										// mode 1 = direction value 2=distance vale


	var valx = document.getElementById("rd_slider_1").value;				// roundslider variable



  setInterval(function ( )									// timer inreval function
  {
    var xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function()
	{
      		if (this.readyState == 4 && this.status == 200)
			{
        			From_Mega=parseInt(this.responseText);				//  input string from server c++/Mega

				document.getElementById("Box_lidar_dist").innerHTML = From_Mega;

      			}
    	};

    xhttp.open("GET", "/from_MEGA", true);							// request string from server

   // xhttp.send();

  }, 500 ) ;											// Interval time 0.5 Sec




  function httpGetAsync(callback)								// HTTP GET to send stw or drive values to C++
	 {
      		var xmlHttp = new XMLHttpRequest();

    	 	xmlHttp.onreadystatechange = function()
		  {
    			 	if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
            							 callback(xmlHttp.responseText);
  		  }

		if (mode==1) { 	xmlHttp.open("GET",'/?dire='+dire, true); };			// send direction  TAG "dire"	true for asynchronous
    		if (mode==2) {  xmlHttp.open("GET",'/?dist='+dist, true); };			// send distance   TAG "dist"	true for asynchronous
		xmlHttp.send(null);
	}



	function tryme(param1)									// empty func
	 {	  }





$(document).ready(function ()								// ready start
{
    $("#rd_slider_1").roundSlider							// define roundslider in JS
	(
		{

			radius: 85,
			min: -180,
			max: 180,
		 	circleShape: "pie",
			sliderType: "min-range",

            		value: 0,

			startAngle: 315,

				change: function(args)
					{

						dire=args.value;			 // direction variable set

						send_srw_val(dire);			 // call type_sl_val

					}


        }

	);

});											// ready ends



	function send_srw_val(val)							// send stw value
	{

	 mode=1;	 								// Steering wheel = mode 1
	 httpGetAsync(tryme);
	}


	function FRW5() 								// Send drive command 5cm
	{

	 mode=2;									// drive motors = mode 2
	 dist=5; 									// drive distance
	 httpGetAsync(tryme);
	 }

	function RET5()
	{

	 mode=2;
	 dist=-5;
	 httpGetAsync(tryme);
	 }

 	function FRW1()
	{

	 mode=2;
	 dist=1;
	 httpGetAsync(tryme);
	 }

	function RET1()
	{

	 mode=2;
	 dist=-1;
	 httpGetAsync(tryme);
	 }







///////////////////////////////////////////// JS END

    </script>


</body>
</html>